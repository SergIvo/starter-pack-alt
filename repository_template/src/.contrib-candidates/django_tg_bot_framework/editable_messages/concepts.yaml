Редактируемое сообщение: !concept
  Определение: |
    Редактируемое сообщение хранит в БД текстовки сообщений и прочие данные, необходимые чат-боту для отправки
    пользователям сообщений в Tg.
  Текстовое сообщение: !example
  Сообщение с картинкой: !example
  Сообщение с фотографией: !example
  Сообщение с фотогалереей: !example
  Шаблонизированное сообщение: !example
  Сообщение в формате Markdown: !example |
    Текстовое сообщение отформатировано в старом формате
    [Telegram Markdown style](https://core.telegram.org/bots/api#markdown-style).
  Сообщение в формате MarkdownV2: !example |
    Текстовое сообщение отформатировано в
    [Telegram MarkdownV2 style](https://core.telegram.org/bots/api#markdownv2-style).
  Сообщение в формате HTML: !example
  Сообщение с клавиатурой: !example
  Сообщение с двухуровневой клавиатурой: !example
  Черновик: !example |
    Текстовка сообщения ещё не прошла редактуру и не готова к использованию.
  Опубликованное сообщение: !example |
    Контент-менеджер проверил текстовку и разрешил отправлять её пользователям.
  Сообщение на китайском: !example |
    В БД может быть несколько похожих сообщений, предназначенных для пользователей с разными локалями: русский,
    китайский, английский, etc. Каждое сообщение/текстовка привязана к своей локали.
  Выгруженное сообщение: !example |
    Содержимое редактируемого сообщения вместе с контентом можно выгрузить из одной БД и залить в другую.
  Пустое сообщение: !example |
    После подстановки переменных в шаблон сообщение оказалось пустым -- там нет ничего, кроме пробелов.
  Сообщение без схемы: !exclusion |
    Запрещаем хранить в БД сообщения без указания схемы, так как в таком случае становится сложно отследить какой код
    какими сообщениями пользуется. Со временем это приводит к замусориванию БД, так как удаление сообщения воспринимается
    как опасная процедура, которой следует избегать.
  Сообщение с локатором: !example |
    Сообщение привязано к локатору. Этот локатор используется для поиска сообщений в БД.
  Один локатор — несколько сообщений: !extension |
    К одному локатору `/menu/` могут быть привязаны сразу несколько сообщений: Prompt, ReactionOnMessage, Farewell.
  Упорядоченные сообщения: !example |
    Когда контента оказывается слишком много для одного сообщения контент-менеджер может разбить одно сообщение на два. Так, например,
    к одному локатору `/info/` могут быть привязаны сразу несколько сообщений. Пользователь получит их все в указанном порядке.
  Одно сообщение — несколько локаторов: !exclusion |
    Если так получилось, что один локатор зарегистрирован по разным локаторам, то в БД создаём отдельный набор сообщений для
    каждого локатора, считаем их разными. Это приведёт к созданию копий в БД, но зато так сохраним гибкость. Да и ситуация эта не
    самая частая.
  Одно сообщение в нескольких схемах данных: !exclusion |
    Чтобы не создавать лишнюю путаницу действуем по аналогии с тем, как работает git -- каждому коммиту свой снимок файловой системы
    с полным набором файлов. Да, это приведёт к созданию кучи копий сообщений в БД, но зато сохраним контроль и сможем снять остроту
    проблемы с помощью простых в реализации эвристик.
  Кастомный виджет: !extension |
    В чат-бота добавлен особый тип редактируемых сообщений, который не поддерживается фреймворком и библиотекой tg_api, но прикладной
    код знает как с ними работать. В админке для такого типа сообщений предусмотрен свой особый тип виджета, упрощающий жизнь
    контент-менеджеру.
  # TODO Текст сообщения содержит символы, ломающие шаблонизатор



Серия редактируемых сообщений: !concept
  Серия пустых сообщений: !example |
    Серия содержит в себе несколько редактируемых шаблонов сообщений. После подстановки переменных в шаблон
    сообщения оказалось пустыми -- там нет ничего, кроме пробелов.
  Серия из нескольких сообщений: !example
  Серия смешанного контента: !example
    Контент-менеджер хочет отправить пользователю смешанный контент, включающий как текст, так и картинки.
  Упорядоченная серия сообщений: !example
    Контент-менеджер хочет отправить смешанный контент, включающий и текст, и картинки. Порядок сообщений важен, его
    задаёт контент-менеджер.
  # TODO Скорее всего, примеры из отдельного сообщения должны переехать в серии. Серии храним в БД, требования к серии описываем в схеме
  # TODO Мультиязычность может потребовать сильно больше 10 языков одновременно. Тогда возможна ситуация, когда для одног языка схема уже готова, а другая -- нет.
  # TODO Разрешаем подключать альтернативные движки шаблонизации ? jinja2, Fluent, etc ? Потянет за собой и альтернативный виджет в админке.
  # TODO Текстовки поставляются вместе с кодом в виде набора файлов. Лежат в репе, используются как дефолтный источник текстовок или как источник для копирования текстовок в админку для дальнейшего редактирования.
  # TODO Серия редактируемых сообщений для разовой рассылки
  # TODO Серия редактируемых сообщений для триггерной рассылки

Локатор серии сообщений: !concept
  # TODO Описать концепт, example, extension и exclusion


Схема серии сообщений: !concept
  Определение: |
    Схема серии сообщений — это перечисление того, какие текстовки, картинки и прочий контент необходим для работы стейт-машины.
    Схема серии сообщений — это аналог контракта между программистами и контент-менеджерами.
  Схема триггерных рассылок: !example |
    Для триггерных рассылок может быть создана отдельная схема сообщений, на которые завязан код чат-бота.
  Реализованная схема: !example |
    В схеме есть полный набор опубликованных сообщений, чтобы соответствовать минимальным требованиям.
  Нереализованная схема: !example |
    Сообщения в БД CMS не полностью соответствуют заявленной схеме: не хватает сообщений, кнопок в клавиатуре или схема контекста
    устарела.
  Защищённая схема: !example |
    CMS внимательно следит за тем, чтобы контент-менеджер случайно не нарушил правила, заданные программистами для корректной
    работы кода.
  Трёхязычная схема: !example |
    Схема требует полного набора сообщений для трёх языков: русский, английский и китайский.
  Схема без кода: !extension |
    Ещё на этапе проектирования чат-бота до написания кода продукт менеджер зафиксировал схему сообщений бота и даже написал
    сообщения, чтобы использовать их в качестве ТЗ для программистов.
  Выгруженная схема: !extension |
    Схему сообщений ещё не успели загрузить в CMS, и она существует в виде отдельного текстового файла. Такой файл подходит для
    хранения в репозитории кода. Этот файл можно загрузить в CMS или выгрузить оттуда.
  Автогенерённая схема: !extension |
    Схема сообщений создана автоматически по py-коду уже написанного телеграм-бота.
  Суть сообщений: !example |
    Для некоторых сообщений в схеме указан не только локатор и прочие id, но и сформулирована ключевая мысль сообщения, чтобы и
    программист и контент-менеджеры понимали о чём здесь речь, пока не готова текстовка.
  Локализованная суть сообщений: !exclusion |
    Нет смысла переводить ключевую мысль сообщения на разные языки. Считаем, что и контент-менеджеры и программисты могут
    общаться на одном общем языке. На этом общем языке и формулируется суть сообщений.
  Подсказки для контент-менеджера: !example |
    Для сообщений указаны подсказки для контент-менеджеров, чтобы тем проще было сориентироваться.
  Локализованные подсказки: !exclusion |
    Нет смысла переводить подсказки на разные языки. Считаем, что и контент-менеджеры и программисты могут
    общаться на одном общем языке. На этом общем языке и формулируются подсказки.
  Несколько схем в одной CMS: !example |
    В одной CMS одновременно могут существовать и поддерживаться в рабочем состоянии несколько схем сообщений. Например, одна схема
    может использоваться здесь и сейчас, а вторая — готовиться к обновлённой версии ПО на сервере.
  # TODO Схема с обязательными кнопками

Рендерер: !concept
  # TODO Описать концепт, example, extension и exclusion
  # TODO Разрешаем подключать альтернативные движки шаблонизации ? jinja2, Fluent, etc ? Потянет за собой и альтернативный виджет в админке.
  # TODO Текстовки поставляются вместе с кодом в виде набора файлов. Лежат в репе, используются как дефолтный источник текстовок или как источник для копирования текстовок в админку для дальнейшего редактирования.
  # TODO Может быть асинхронным ?
  # TODO Может рендерить балком (bulk) ?

Контекст рендеринга: !concept
  # TODO Описать концепт, example, extension и exclusion
  Mock renderer: !example

Message Router: !concept
  # TODO Описать концепт, example, extension и exclusion

Context Processor: !concept
  # TODO Описать концепт, example, extension и exclusion
